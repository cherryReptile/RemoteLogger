// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/auth.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthAppServiceClient is the client API for AuthAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthAppServiceClient interface {
	Register(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error)
	Login(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error)
	AddAccount(ctx context.Context, in *AddAppRequest, opts ...grpc.CallOption) (*AddedResponse, error)
}

type authAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthAppServiceClient(cc grpc.ClientConnInterface) AuthAppServiceClient {
	return &authAppServiceClient{cc}
}

func (c *authAppServiceClient) Register(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.AuthAppService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authAppServiceClient) Login(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.AuthAppService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authAppServiceClient) AddAccount(ctx context.Context, in *AddAppRequest, opts ...grpc.CallOption) (*AddedResponse, error) {
	out := new(AddedResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.AuthAppService/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthAppServiceServer is the server API for AuthAppService service.
// All implementations must embed UnimplementedAuthAppServiceServer
// for forward compatibility
type AuthAppServiceServer interface {
	Register(context.Context, *AppRequest) (*AppResponse, error)
	Login(context.Context, *AppRequest) (*AppResponse, error)
	AddAccount(context.Context, *AddAppRequest) (*AddedResponse, error)
	mustEmbedUnimplementedAuthAppServiceServer()
}

// UnimplementedAuthAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthAppServiceServer struct {
}

func (UnimplementedAuthAppServiceServer) Register(context.Context, *AppRequest) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthAppServiceServer) Login(context.Context, *AppRequest) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthAppServiceServer) AddAccount(context.Context, *AddAppRequest) (*AddedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedAuthAppServiceServer) mustEmbedUnimplementedAuthAppServiceServer() {}

// UnsafeAuthAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthAppServiceServer will
// result in compilation errors.
type UnsafeAuthAppServiceServer interface {
	mustEmbedUnimplementedAuthAppServiceServer()
}

func RegisterAuthAppServiceServer(s grpc.ServiceRegistrar, srv AuthAppServiceServer) {
	s.RegisterService(&AuthAppService_ServiceDesc, srv)
}

func _AuthAppService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthAppServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.AuthAppService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthAppServiceServer).Register(ctx, req.(*AppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthAppService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthAppServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.AuthAppService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthAppServiceServer).Login(ctx, req.(*AppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthAppService_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthAppServiceServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.AuthAppService/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthAppServiceServer).AddAccount(ctx, req.(*AddAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthAppService_ServiceDesc is the grpc.ServiceDesc for AuthAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.v1.AuthAppService",
	HandlerType: (*AuthAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthAppService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthAppService_Login_Handler,
		},
		{
			MethodName: "AddAccount",
			Handler:    _AuthAppService_AddAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}

// AuthGithubServiceClient is the client API for AuthGithubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthGithubServiceClient interface {
	GetToken(ctx context.Context, in *OAuthCodeRequest, opts ...grpc.CallOption) (*OAuthTokenResponse, error)
	Login(ctx context.Context, in *OAuthRequest, opts ...grpc.CallOption) (*AppResponse, error)
	AddAccount(ctx context.Context, in *AddOauthRequest, opts ...grpc.CallOption) (*AddedResponse, error)
}

type authGithubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthGithubServiceClient(cc grpc.ClientConnInterface) AuthGithubServiceClient {
	return &authGithubServiceClient{cc}
}

func (c *authGithubServiceClient) GetToken(ctx context.Context, in *OAuthCodeRequest, opts ...grpc.CallOption) (*OAuthTokenResponse, error) {
	out := new(OAuthTokenResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.AuthGithubService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGithubServiceClient) Login(ctx context.Context, in *OAuthRequest, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.AuthGithubService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGithubServiceClient) AddAccount(ctx context.Context, in *AddOauthRequest, opts ...grpc.CallOption) (*AddedResponse, error) {
	out := new(AddedResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.AuthGithubService/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthGithubServiceServer is the server API for AuthGithubService service.
// All implementations must embed UnimplementedAuthGithubServiceServer
// for forward compatibility
type AuthGithubServiceServer interface {
	GetToken(context.Context, *OAuthCodeRequest) (*OAuthTokenResponse, error)
	Login(context.Context, *OAuthRequest) (*AppResponse, error)
	AddAccount(context.Context, *AddOauthRequest) (*AddedResponse, error)
	mustEmbedUnimplementedAuthGithubServiceServer()
}

// UnimplementedAuthGithubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthGithubServiceServer struct {
}

func (UnimplementedAuthGithubServiceServer) GetToken(context.Context, *OAuthCodeRequest) (*OAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAuthGithubServiceServer) Login(context.Context, *OAuthRequest) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthGithubServiceServer) AddAccount(context.Context, *AddOauthRequest) (*AddedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedAuthGithubServiceServer) mustEmbedUnimplementedAuthGithubServiceServer() {}

// UnsafeAuthGithubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthGithubServiceServer will
// result in compilation errors.
type UnsafeAuthGithubServiceServer interface {
	mustEmbedUnimplementedAuthGithubServiceServer()
}

func RegisterAuthGithubServiceServer(s grpc.ServiceRegistrar, srv AuthGithubServiceServer) {
	s.RegisterService(&AuthGithubService_ServiceDesc, srv)
}

func _AuthGithubService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGithubServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.AuthGithubService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGithubServiceServer).GetToken(ctx, req.(*OAuthCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGithubService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGithubServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.AuthGithubService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGithubServiceServer).Login(ctx, req.(*OAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGithubService_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOauthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGithubServiceServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.AuthGithubService/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGithubServiceServer).AddAccount(ctx, req.(*AddOauthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthGithubService_ServiceDesc is the grpc.ServiceDesc for AuthGithubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthGithubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.v1.AuthGithubService",
	HandlerType: (*AuthGithubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _AuthGithubService_GetToken_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthGithubService_Login_Handler,
		},
		{
			MethodName: "AddAccount",
			Handler:    _AuthGithubService_AddAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}

// AuthGoogleServiceClient is the client API for AuthGoogleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthGoogleServiceClient interface {
	GetToken(ctx context.Context, in *OAuthCodeRequest, opts ...grpc.CallOption) (*OAuthTokenResponse, error)
	Login(ctx context.Context, in *OAuthRequest, opts ...grpc.CallOption) (*AppResponse, error)
	AddAccount(ctx context.Context, in *AddOauthRequest, opts ...grpc.CallOption) (*AddedResponse, error)
}

type authGoogleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthGoogleServiceClient(cc grpc.ClientConnInterface) AuthGoogleServiceClient {
	return &authGoogleServiceClient{cc}
}

func (c *authGoogleServiceClient) GetToken(ctx context.Context, in *OAuthCodeRequest, opts ...grpc.CallOption) (*OAuthTokenResponse, error) {
	out := new(OAuthTokenResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.AuthGoogleService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGoogleServiceClient) Login(ctx context.Context, in *OAuthRequest, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.AuthGoogleService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGoogleServiceClient) AddAccount(ctx context.Context, in *AddOauthRequest, opts ...grpc.CallOption) (*AddedResponse, error) {
	out := new(AddedResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.AuthGoogleService/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthGoogleServiceServer is the server API for AuthGoogleService service.
// All implementations must embed UnimplementedAuthGoogleServiceServer
// for forward compatibility
type AuthGoogleServiceServer interface {
	GetToken(context.Context, *OAuthCodeRequest) (*OAuthTokenResponse, error)
	Login(context.Context, *OAuthRequest) (*AppResponse, error)
	AddAccount(context.Context, *AddOauthRequest) (*AddedResponse, error)
	mustEmbedUnimplementedAuthGoogleServiceServer()
}

// UnimplementedAuthGoogleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthGoogleServiceServer struct {
}

func (UnimplementedAuthGoogleServiceServer) GetToken(context.Context, *OAuthCodeRequest) (*OAuthTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedAuthGoogleServiceServer) Login(context.Context, *OAuthRequest) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthGoogleServiceServer) AddAccount(context.Context, *AddOauthRequest) (*AddedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedAuthGoogleServiceServer) mustEmbedUnimplementedAuthGoogleServiceServer() {}

// UnsafeAuthGoogleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthGoogleServiceServer will
// result in compilation errors.
type UnsafeAuthGoogleServiceServer interface {
	mustEmbedUnimplementedAuthGoogleServiceServer()
}

func RegisterAuthGoogleServiceServer(s grpc.ServiceRegistrar, srv AuthGoogleServiceServer) {
	s.RegisterService(&AuthGoogleService_ServiceDesc, srv)
}

func _AuthGoogleService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGoogleServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.AuthGoogleService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGoogleServiceServer).GetToken(ctx, req.(*OAuthCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGoogleService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGoogleServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.AuthGoogleService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGoogleServiceServer).Login(ctx, req.(*OAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGoogleService_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOauthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGoogleServiceServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.AuthGoogleService/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGoogleServiceServer).AddAccount(ctx, req.(*AddOauthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthGoogleService_ServiceDesc is the grpc.ServiceDesc for AuthGoogleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthGoogleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.v1.AuthGoogleService",
	HandlerType: (*AuthGoogleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _AuthGoogleService_GetToken_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthGoogleService_Login_Handler,
		},
		{
			MethodName: "AddAccount",
			Handler:    _AuthGoogleService_AddAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}

// AuthTelegramServiceClient is the client API for AuthTelegramService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthTelegramServiceClient interface {
	Login(ctx context.Context, in *TelegramRequest, opts ...grpc.CallOption) (*AppResponse, error)
}

type authTelegramServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthTelegramServiceClient(cc grpc.ClientConnInterface) AuthTelegramServiceClient {
	return &authTelegramServiceClient{cc}
}

func (c *authTelegramServiceClient) Login(ctx context.Context, in *TelegramRequest, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.AuthTelegramService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthTelegramServiceServer is the server API for AuthTelegramService service.
// All implementations must embed UnimplementedAuthTelegramServiceServer
// for forward compatibility
type AuthTelegramServiceServer interface {
	Login(context.Context, *TelegramRequest) (*AppResponse, error)
	mustEmbedUnimplementedAuthTelegramServiceServer()
}

// UnimplementedAuthTelegramServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthTelegramServiceServer struct {
}

func (UnimplementedAuthTelegramServiceServer) Login(context.Context, *TelegramRequest) (*AppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthTelegramServiceServer) mustEmbedUnimplementedAuthTelegramServiceServer() {}

// UnsafeAuthTelegramServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthTelegramServiceServer will
// result in compilation errors.
type UnsafeAuthTelegramServiceServer interface {
	mustEmbedUnimplementedAuthTelegramServiceServer()
}

func RegisterAuthTelegramServiceServer(s grpc.ServiceRegistrar, srv AuthTelegramServiceServer) {
	s.RegisterService(&AuthTelegramService_ServiceDesc, srv)
}

func _AuthTelegramService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthTelegramServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.AuthTelegramService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthTelegramServiceServer).Login(ctx, req.(*TelegramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthTelegramService_ServiceDesc is the grpc.ServiceDesc for AuthTelegramService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthTelegramService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.v1.AuthTelegramService",
	HandlerType: (*AuthTelegramServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthTelegramService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}

// GetUserServiceClient is the client API for GetUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetUserServiceClient interface {
	GetUser(ctx context.Context, in *JWTTokenRequest, opts ...grpc.CallOption) (*UserClientResponse, error)
}

type getUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetUserServiceClient(cc grpc.ClientConnInterface) GetUserServiceClient {
	return &getUserServiceClient{cc}
}

func (c *getUserServiceClient) GetUser(ctx context.Context, in *JWTTokenRequest, opts ...grpc.CallOption) (*UserClientResponse, error) {
	out := new(UserClientResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.GetUserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUserServiceServer is the server API for GetUserService service.
// All implementations must embed UnimplementedGetUserServiceServer
// for forward compatibility
type GetUserServiceServer interface {
	GetUser(context.Context, *JWTTokenRequest) (*UserClientResponse, error)
	mustEmbedUnimplementedGetUserServiceServer()
}

// UnimplementedGetUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGetUserServiceServer struct {
}

func (UnimplementedGetUserServiceServer) GetUser(context.Context, *JWTTokenRequest) (*UserClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGetUserServiceServer) mustEmbedUnimplementedGetUserServiceServer() {}

// UnsafeGetUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetUserServiceServer will
// result in compilation errors.
type UnsafeGetUserServiceServer interface {
	mustEmbedUnimplementedGetUserServiceServer()
}

func RegisterGetUserServiceServer(s grpc.ServiceRegistrar, srv GetUserServiceServer) {
	s.RegisterService(&GetUserService_ServiceDesc, srv)
}

func _GetUserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.GetUserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUserServiceServer).GetUser(ctx, req.(*JWTTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetUserService_ServiceDesc is the grpc.ServiceDesc for GetUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.v1.GetUserService",
	HandlerType: (*GetUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _GetUserService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}

// JWTTokenServiceClient is the client API for JWTTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JWTTokenServiceClient interface {
	Drop(ctx context.Context, in *JWTTokenRequest, opts ...grpc.CallOption) (*DroppedTokenResponse, error)
}

type jWTTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJWTTokenServiceClient(cc grpc.ClientConnInterface) JWTTokenServiceClient {
	return &jWTTokenServiceClient{cc}
}

func (c *jWTTokenServiceClient) Drop(ctx context.Context, in *JWTTokenRequest, opts ...grpc.CallOption) (*DroppedTokenResponse, error) {
	out := new(DroppedTokenResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.JWTTokenService/Drop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JWTTokenServiceServer is the server API for JWTTokenService service.
// All implementations must embed UnimplementedJWTTokenServiceServer
// for forward compatibility
type JWTTokenServiceServer interface {
	Drop(context.Context, *JWTTokenRequest) (*DroppedTokenResponse, error)
	mustEmbedUnimplementedJWTTokenServiceServer()
}

// UnimplementedJWTTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJWTTokenServiceServer struct {
}

func (UnimplementedJWTTokenServiceServer) Drop(context.Context, *JWTTokenRequest) (*DroppedTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drop not implemented")
}
func (UnimplementedJWTTokenServiceServer) mustEmbedUnimplementedJWTTokenServiceServer() {}

// UnsafeJWTTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JWTTokenServiceServer will
// result in compilation errors.
type UnsafeJWTTokenServiceServer interface {
	mustEmbedUnimplementedJWTTokenServiceServer()
}

func RegisterJWTTokenServiceServer(s grpc.ServiceRegistrar, srv JWTTokenServiceServer) {
	s.RegisterService(&JWTTokenService_ServiceDesc, srv)
}

func _JWTTokenService_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTTokenServiceServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.JWTTokenService/Drop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTTokenServiceServer).Drop(ctx, req.(*JWTTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JWTTokenService_ServiceDesc is the grpc.ServiceDesc for JWTTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JWTTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.v1.JWTTokenService",
	HandlerType: (*JWTTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Drop",
			Handler:    _JWTTokenService_Drop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}

// ProfileServiceClient is the client API for ProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileServiceClient interface {
	Create(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	Update(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	Get(ctx context.Context, in *ProfileUserID, opts ...grpc.CallOption) (*ProfileResponse, error)
	Delete(ctx context.Context, in *ProfileUserID, opts ...grpc.CallOption) (*ProfileDeleted, error)
}

type profileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileServiceClient(cc grpc.ClientConnInterface) ProfileServiceClient {
	return &profileServiceClient{cc}
}

func (c *profileServiceClient) Create(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.ProfileService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Update(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.ProfileService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Get(ctx context.Context, in *ProfileUserID, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/logger.v1.ProfileService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileServiceClient) Delete(ctx context.Context, in *ProfileUserID, opts ...grpc.CallOption) (*ProfileDeleted, error) {
	out := new(ProfileDeleted)
	err := c.cc.Invoke(ctx, "/logger.v1.ProfileService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileServiceServer is the server API for ProfileService service.
// All implementations must embed UnimplementedProfileServiceServer
// for forward compatibility
type ProfileServiceServer interface {
	Create(context.Context, *ProfileRequest) (*ProfileResponse, error)
	Update(context.Context, *ProfileRequest) (*ProfileResponse, error)
	Get(context.Context, *ProfileUserID) (*ProfileResponse, error)
	Delete(context.Context, *ProfileUserID) (*ProfileDeleted, error)
	mustEmbedUnimplementedProfileServiceServer()
}

// UnimplementedProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfileServiceServer struct {
}

func (UnimplementedProfileServiceServer) Create(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProfileServiceServer) Update(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProfileServiceServer) Get(context.Context, *ProfileUserID) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProfileServiceServer) Delete(context.Context, *ProfileUserID) (*ProfileDeleted, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProfileServiceServer) mustEmbedUnimplementedProfileServiceServer() {}

// UnsafeProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileServiceServer will
// result in compilation errors.
type UnsafeProfileServiceServer interface {
	mustEmbedUnimplementedProfileServiceServer()
}

func RegisterProfileServiceServer(s grpc.ServiceRegistrar, srv ProfileServiceServer) {
	s.RegisterService(&ProfileService_ServiceDesc, srv)
}

func _ProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.ProfileService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Create(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.ProfileService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Update(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.ProfileService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Get(ctx, req.(*ProfileUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.v1.ProfileService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileServiceServer).Delete(ctx, req.(*ProfileUserID))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileService_ServiceDesc is the grpc.ServiceDesc for ProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "logger.v1.ProfileService",
	HandlerType: (*ProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProfileService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProfileService_Update_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProfileService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProfileService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/auth.proto",
}
